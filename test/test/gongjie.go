三四章总体规划：
3章  system model（系统模型取名MH-CertChain，M代表多链；H代表异构）
一句话说本章内容：本章展示系统模型、威胁模型和设计目标
    3.1 系统模型（图1；待更新）
	  3.1.1证书链模型，三条链IC；RC；SC和一个多重布谷鸟过滤器（之说功能，不说结构）（为了后期方便描述颁发，撤销和认证过程）(IC；RC；SC详细描述；一个多重布谷鸟过滤器提一句，参考4.2.3)
	  3.1.2参与者，主要是三种参与者 CAs, domain, and user；三者之间的联系
	  3.1.3为什么CA迁移,什么是CA迁移，CA迁移过程，
	3.2 威胁模型（图2；待更新）
	  3.2.1参与着，CA，hacker
	  3.2.2攻击方式，DDOs攻击，方式可能有带宽攻击；洪泛攻击等等（在第4章最后一小节证明，有可能放在附录里面），
	                引诱正常节点犯错的攻击（比如）， （此处还不确定，暂时论文里面用的是挟持攻击和字典攻击，使得控制一个证书，进行作恶）
	  3.2.3安全假设  无法破坏哈希和密钥，正常节点被引诱犯错数量低于50%
	3.3 设计目标 
	    1；2；3；4个设计目标    


4章  机制
一句话说明本章设计高效证书管理模型，
    4.1证书管理功能
	一句话说明证书管理周期包含，颁发（更新），撤销，认证。
	    4.1.1证书颁发（更新过程）：包括一个算法（算法不更新）
		4.1.2证书撤销过程：包括一个算法（算法不更新）
	4.2技术创新
	创新包括异构链模型；多重布谷鸟过滤器
	    4.2.1异构链模型
		     异构链的转化过程（图4；更新增加process1；process2；process3）
		4.2.2证书认证过程：包括一个算法（算法不更新）;（无图，图7不要了）
		     证书新格式（HCert）（无图；图3不要了，删了）
		     认证方式HCV（创新）（图6；不更新）
		4.2.3多重布谷鸟过滤器（图8；待更新）
		     多重布谷鸟过滤器是什么（估计有两段的描述） 
			 多重布谷鸟过滤器证明（随着五个指标的变化，有多少重表才是最合适）（后期放在附录里面）（table1和table2一部分放在附录里面了，不更新）
	4.3安全证明
	    证明1：DDOs攻击破坏硬件防御机制，分布式系统仍能保持证书管理功能（假设分布式节点足够多）（证明过程后期放在附录里面）
		证明2：引诱节点犯错，有的节点颁发错误证书或者撤销，认证错误证书将会被发现。（证明过程后期放在附录里面）
		证书操作记录被记录在区块链中，事后，其他监督节点发现并举报，


		CA Migrat Protocol of MH-CertChain
		5.1 protocol design
		5.1.1 系统状态
		证书状态；证书正常状态，吊销状态。对应两种操作证书更新（变色龙）和证书删除（RC），对应两种合约（Chameleon contract（CM-Cha）和deletion CM-Del）以及合约上的两种操作（共识变色龙哈希解锁执行操作和RC解锁删除操作）
		对应参与者请求证书迁移的 CA (A)，CA 的原始父 (B)、CA 的新父 (C) 和其他超级监督和协助 CA (S)	，结合Ca迁移算法，描述各个参与者的操作（创建，解锁，合约执行）以及奖励。
		合约解锁条件，（使用的原子操作）（解释每一个操作是原子性的，合约具有原子性，所有操作具有原子性）
		
		引入了信誉积分激励机制和不当行为惩罚机制，解释哪些行为将奖励，哪些将惩罚
		5.2 double HTL

	    DHTL与HTL相似，一个协议中设计两个DHTL，不同点是DHTL中解锁需要两个随机数，DHTLC在CA迁移的应用（每个合约中包含的随机数，哈希函数，解锁方式，如果失败的回滚方式）
		提出现实协议  分三个步骤设置、启动和解锁CM-DHTLC合约，通过在区块链的交易细节（字段），详细描述理想协议三个步骤。

		5.3 protocol security analysis
		解释设置、启动和解锁三个步骤是安全的
            1，多个有效交易可能会发生冲突，因此只有其中一个可以确认,略不相关的交易。
			2，CM-DHTLC 的投影 (mbp) 功能，假设全局随机预言机的理想功能 H等等都是安全的
			3，定义混合协议（H）
			4，定义理想模型，解释在理想模型下，系统的安全性
			     引理1，参与者的操作都是安全的
			5，s节点分为了短视和不短视的节点，
			     引理2，在B或C不支持CA迁移时，s的最佳行为策略
			     引理3，在B或C支持CA迁移时，不短视s的最佳行为策略
			     引理4，在B或C支持CA迁移时，短视s的最佳行为策略
				   得出定理1，根据引理1，2，3.系统具有安全性
			6，针对第三章威胁模型，可得，节点之间的共谋攻击，系统仍具有安全性和稳定性。

7实验评估，
          7.1 实验环境
		         硬件环境；软件环境；fabric配置
		  7.2 HM-CertChain测试
		     十二张图：1：MH的构建速度（证书颁发速度）和原型系统证书颁发速度比较
			          2：不同层级下，MH的构建速度比较
					  3：历史证书查询速度和传统区块证书查询速度比较
					  4：HCQ查询随着证书正确率的变化，速度变化
					  5：不同层级下，HCQ查询速度变化
					  6：随着撤销证书数量的增多，证书撤销时间，
					  7：不同层级下，RC查询速度比较
					  8：随着证书正确率的变化，RC查询速度比较
					  9：随着证书颁发数量，证书认证速度变化，
					  10：在证书认证过程中，HCQ和RC和MCF时间消耗对比
					  11：不同多重布谷鸟过滤器，证书认证速度变化，
					  12:随着认证证书撤销率的变化，证书认证速度的变化

		  7.3 一重，两重，和三重 布隆过滤器， 熵过滤器和计数布隆过滤器的对比。
		            设定 1：元素数量的多少
					     2：消耗内存的多少
						 3：平均每个元素占据多少内存
					测量：假阳性
					      构建速度
						  查询速度
						  删除速度
		   7.4 CA迁移实验（不写）。
		   8，总结
		

		   CA迁移协议
		   1.协议流程
		   协议流程分为三部分
		   第一步：建立流程，A申请CA迁移，B随机生成preb，C随机生成prec（随机数在未公开前只能他们自己知道），ABC发布交易生成包含contract_Cha(digb=H(preb)，digc=H(prec),T1,op(mod),timestamp,sig)和contract_Del(digb=H(preb)，digc=H(prec),T2,op(Del),timestamp,sig)T2>T1的哈希时间锁，并上传tx pool
		   第二步：合约解锁阶段，B，C提供随机数preb和prec，解锁contract_Cha，S可以根据BC提供的preb和prec，解锁contract_Del。他们可以选择解锁，也可以选择不解锁。
		   第三步：合约执行阶段，如果contract_Cha未被解锁，CA迁移失败；如果contract_Cha解锁，op(mod)不执行，通过变色龙哈希技术，系统回滚,CA迁移失败；如果contract_Cha解锁，op(mod)执行，contract_Del解锁，op(del)执行,则CA迁移成功。 
				  
		   以上步骤，设计人员的描述，合约contract和执行op的描述。  

		   2.双哈希时间锁合约
		   DHTLC合约为了控制B，C，S之间的解锁过程，B，C生成随机数，负责解锁合约contract_Cha，S负责监督BC，并解锁contract_Del合约。
		   合约1：组成：(H(preb),T1,op(mod),timestamp,sigB);H(preb)是B私钥加密随机数preb，T1过期时间，op(mod)解锁后的操作。
		         解锁方式：合约1的解锁需要B发布preb的交易和C发布prec的交易，如果其中缺少任何一个人的pre，则解锁失败
		   合约2：组成：(H(prec),T2,op(del),timestamp,sigc);H(prec)是C私钥加密随机数prec，T2过期时间，op(del)解锁后的操作。
		         解锁方式：合约2的解锁需要S发布preb和prec的交易(被B和C公开后)，否则解锁失败，合约2解锁失败后要检查合约1是否解锁且执行，若op(mod)执行,则系统回滚。

		   DHTLC设计的目的是为了提高contract_Cha的解锁难度，同时降低contract_Del的解锁难度
		   双哈希时间锁执行结束后是合约执行阶段，

	补充：1：激励机制
	      2：三个原语操作，vSig (sig; pk)；vPreImg (preb; prec; dig);vTime (T) 我们的CA迁移是原子性的，要么执行，要么回滚到初始状态。


		  证书修改；
		  证书修改是使用变色龙哈希在区块内的原有交易基础上进行修改，涉及的技术是变色龙哈希技术和分布式陷门密钥管理（参考Preliminaries2.3）.证书修改过程如算法4所示：
		  1：证书准备。首先A申请证书修改，将Hcert_orign和C颁发的Hcert_new发给B，B重构分布式陷门密钥，设置启动条件，形成op_mod操作，成为contract_mod的一部分。
		  2：操作启动。当contract_mod被解锁，解析旧证书并从IC获得区块，计算碰撞哈希和随机数，重构并覆盖旧区块。
		  3：记录。为了记录无痕迹的变色龙哈希修改过程，S将（旧证书，新证书,B,time）存储在SC上。




